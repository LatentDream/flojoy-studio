{
    "rfInstance": {
        "nodes": [
            {
                "width": 192,
                "height": 192,
                "id": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER-90ef7bf1-5ac5-4831-ad96-6187da259bdf",
                "type": "HARDWARE",
                "data": {
                    "id": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER-90ef7bf1-5ac5-4831-ad96-6187da259bdf",
                    "label": "CREATE TASK ANALOG INPUT ACCELEROMETER",
                    "func": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                    "type": "HARDWARE",
                    "ctrls": {
                        "cDAQ_start_channel": {
                            "type": "NIDAQmxDevice",
                            "default": null,
                            "desc": "The device and channel to read from.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "cDAQ_start_channel",
                            "value": "cDAQ2Mod2/ai0"
                        },
                        "cDAQ_end_channel": {
                            "type": "NIDAQmxDevice",
                            "default": null,
                            "desc": "To read from only one channel, set this to the same as cDAQ_start_channel. To read from multiple channels, set this to the last channel you want to read from.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "cDAQ_end_channel",
                            "value": "cDAQ2Mod2/ai2"
                        },
                        "min_val": {
                            "type": "float",
                            "default": -5,
                            "desc": "Specifies in **units** the minimum value you expect to measure.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "min_val",
                            "value": -5
                        },
                        "max_val": {
                            "type": "float",
                            "default": 5,
                            "desc": "Specifies in **units** the maximum value you expect to measure.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "max_val",
                            "value": 5
                        },
                        "units": {
                            "type": "select",
                            "options": [
                                "G",
                                "Inches per second squared",
                                "Meters per second squared"
                            ],
                            "default": "G",
                            "desc": "The units to use to return accelerometer measurements.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "units",
                            "value": "G"
                        },
                        "sensitivity": {
                            "type": "float",
                            "default": 1000,
                            "desc": "Is the sensitivity of the sensor. This value is in the units you specify with the sensitivity_units input. Refer to the sensor documentation to determine this value.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "sensitivity",
                            "value": 1000
                        },
                        "sensitivity_units": {
                            "type": "select",
                            "options": [
                                "Millivolts per GVolts per G"
                            ],
                            "default": "Millivolts per G",
                            "desc": "Specifies the units of the sensitivity input.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "sensitivity_units",
                            "value": "Millivolts per G"
                        },
                        "current_excitation_source": {
                            "type": "select",
                            "options": [
                                "External",
                                "Internal",
                                "None"
                            ],
                            "default": "Internal",
                            "desc": "Specifies the source of excitation.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "current_excitation_source",
                            "value": "Internal"
                        },
                        "current_excitation_value": {
                            "type": "float",
                            "default": 0.004,
                            "desc": "Specifies in amperes the amount of excitation to supply to the sensor. Refer to the sensor documentation to determine this value.",
                            "overload": null,
                            "functionName": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER",
                            "param": "current_excitation_value",
                            "value": 0.004
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "multiple": false,
                            "desc": null
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "None"
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/CREATE_TASK_ANALOG_INPUT_ACCELEROMETER/CREATE_TASK_ANALOG_INPUT_ACCELEROMETER.py"
                },
                "position": {
                    "x": -162.67176946783928,
                    "y": -387.4191637598578
                },
                "selected": true,
                "positionAbsolute": {
                    "x": -162.67176946783928,
                    "y": -387.4191637598578
                },
                "dragging": true
            },
            {
                "width": 192,
                "height": 192,
                "id": "READ_TASK-9aaa1c02-655b-4f2d-8209-af43fc3c6175",
                "type": "HARDWARE",
                "data": {
                    "id": "READ_TASK-9aaa1c02-655b-4f2d-8209-af43fc3c6175",
                    "label": "READ TASK",
                    "func": "READ_TASK",
                    "type": "HARDWARE",
                    "ctrls": {
                        "connection": {
                            "type": "NIDAQmxConnection",
                            "default": null,
                            "desc": null,
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "connection",
                            "value": "cDAQ2Mod2/ai0"
                        },
                        "number_of_samples_per_channel": {
                            "type": "int",
                            "default": 1,
                            "desc": "Number of samples to read.",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "number_of_samples_per_channel",
                            "value": 100
                        },
                        "timeout": {
                            "type": "float",
                            "default": 10,
                            "desc": "Time to wait for samples to become available. If you set timeout to 0, the method tries once to read the requested samples and returns an error if it is unable to.",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "timeout",
                            "value": 10
                        },
                        "wait_infinitely": {
                            "type": "bool",
                            "default": false,
                            "desc": "If True, the method waits indefinitely for samples to become available. If False, the method waits for the amount of time specified by timeout.",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "wait_infinitely",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "multiple": false,
                            "desc": null
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Vector|Matrix",
                            "desc": "Samples read from the device."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/READ_TASK/READ_TASK.py"
                },
                "position": {
                    "x": 352.65303037039683,
                    "y": -392.52217517932553
                },
                "selected": false,
                "positionAbsolute": {
                    "x": 352.65303037039683,
                    "y": -392.52217517932553
                },
                "dragging": true
            },
            {
                "width": 740,
                "height": 235,
                "id": "LINE-c0cfb7f5-0206-415c-9008-52492f746975",
                "type": "VISUALIZATION",
                "data": {
                    "id": "LINE-c0cfb7f5-0206-415c-9008-52492f746975",
                    "label": "LINE",
                    "func": "LINE",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "xaxis_title": {
                            "type": "str",
                            "default": "",
                            "desc": "Choose the label for the x axis.",
                            "overload": null,
                            "functionName": "LINE",
                            "param": "xaxis_title",
                            "value": ""
                        },
                        "yaxis_title": {
                            "type": "str",
                            "default": "",
                            "desc": "Choose the label for the y axis.",
                            "overload": null,
                            "functionName": "LINE",
                            "param": "yaxis_title",
                            "value": ""
                        },
                        "x_log_scale": {
                            "type": "bool",
                            "default": false,
                            "desc": null,
                            "overload": null,
                            "functionName": "LINE",
                            "param": "x_log_scale",
                            "value": false
                        },
                        "y_log_scale": {
                            "type": "bool",
                            "default": false,
                            "desc": null,
                            "overload": null,
                            "functionName": "LINE",
                            "param": "y_log_scale",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|DataFrame|Matrix|Vector",
                            "multiple": false,
                            "desc": "the DataContainer to be visualized"
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Plotly",
                            "desc": "the DataContainer containing the Plotly Line visualization of the input data"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/PLOTLY/LINE/LINE.py"
                },
                "position": {
                    "x": -178.55995004601476,
                    "y": -158.65434926337804
                },
                "selected": false,
                "positionAbsolute": {
                    "x": -178.55995004601476,
                    "y": -158.65434926337804
                },
                "dragging": true,
                "style": {
                    "width": 740,
                    "height": 235
                },
                "resizing": false
            },
            {
                "width": 192,
                "height": 192,
                "id": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-b35d2f39-62bc-4309-8f01-1f03ff30c5be",
                "type": "HARDWARE",
                "data": {
                    "id": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-b35d2f39-62bc-4309-8f01-1f03ff30c5be",
                    "label": "CONFIG TASK SAMPLE CLOCK TIMING",
                    "func": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                    "type": "HARDWARE",
                    "ctrls": {
                        "connection": {
                            "type": "NIDAQmxConnection",
                            "default": null,
                            "desc": null,
                            "overload": null,
                            "functionName": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                            "param": "connection",
                            "value": "cDAQ2Mod2/ai0"
                        },
                        "sample_clock_rate": {
                            "type": "float",
                            "default": 1000,
                            "desc": "Specifies the sampling rate in samples per channel per second.\nIf you use an external source for the Sample Clock, set this input to the maximum expected rate of that clock.\nUses the onboard clock of the device.",
                            "overload": null,
                            "functionName": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                            "param": "sample_clock_rate",
                            "value": 1000
                        },
                        "number_of_samples_per_channel": {
                            "type": "int",
                            "default": 1000,
                            "desc": "Specifies the number of samples to acquire or generate for each channel in the task",
                            "overload": null,
                            "functionName": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                            "param": "number_of_samples_per_channel",
                            "value": 1000
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "multiple": false,
                            "desc": null
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "None"
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/CONFIG_TASK_SAMPLE_CLOCK_TIMING/CONFIG_TASK_SAMPLE_CLOCK_TIMING.py"
                },
                "position": {
                    "x": 87.91588682113837,
                    "y": -386.84584894934534
                },
                "selected": false,
                "positionAbsolute": {
                    "x": 87.91588682113837,
                    "y": -386.84584894934534
                },
                "dragging": true
            }
        ],
        "edges": [
            {
                "source": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-b35d2f39-62bc-4309-8f01-1f03ff30c5be",
                "sourceHandle": "default",
                "target": "READ_TASK-9aaa1c02-655b-4f2d-8209-af43fc3c6175",
                "targetHandle": "default",
                "id": "reactflow__edge-CONFIG_TASK_SAMPLE_CLOCK_TIMING-b35d2f39-62bc-4309-8f01-1f03ff30c5bedefault-READ_TASK-9aaa1c02-655b-4f2d-8209-af43fc3c6175default"
            },
            {
                "source": "READ_TASK-9aaa1c02-655b-4f2d-8209-af43fc3c6175",
                "sourceHandle": "default",
                "target": "LINE-c0cfb7f5-0206-415c-9008-52492f746975",
                "targetHandle": "default",
                "id": "reactflow__edge-READ_TASK-9aaa1c02-655b-4f2d-8209-af43fc3c6175default-LINE-c0cfb7f5-0206-415c-9008-52492f746975default"
            },
            {
                "source": "CREATE_TASK_ANALOG_INPUT_ACCELEROMETER-90ef7bf1-5ac5-4831-ad96-6187da259bdf",
                "sourceHandle": "default",
                "target": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-b35d2f39-62bc-4309-8f01-1f03ff30c5be",
                "targetHandle": "default",
                "id": "reactflow__edge-CREATE_TASK_ANALOG_INPUT_ACCELEROMETER-90ef7bf1-5ac5-4831-ad96-6187da259bdfdefault-CONFIG_TASK_SAMPLE_CLOCK_TIMING-b35d2f39-62bc-4309-8f01-1f03ff30c5bedefault"
            }
        ],
        "viewport": {
            "x": 834.2329483859432,
            "y": 568.7401475724156,
            "zoom": 0.9755902783087886
        }
    },
    "textNodes": []
}